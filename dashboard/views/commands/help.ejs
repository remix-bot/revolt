<body style="background-color: rgb(17 24 39); color: white">
  <style>
  code {
    background-color: rgb(31 41 55);
    border-radius: 5px;
    padding: 0.7rem;
  }
  .error {
    text-decoration: underline red;
  }
  </style>
  <%
  const colorMapping = {
    string: "gold",
    number: "blue",
    boolean: "red",
    channel: "",
    user: "",
    text: "inherit",
    choice: ""
  }
  // TODO: include command parser and sandbox
  %>

  <div id="sandbox" onkeyup="update(this)" contenteditable="true" style="border: 1px solid white; min-height: 3rem; padding: 0.5rem; border-radius: 5px;" spellcheck="false">

  </div>
  <p style="color: red" id="error">

  </p>
  <script>
  const PREFIX = "<%= prefix %>";
  const COMMANDS = JSON.parse('<%- JSON.stringify(commands.map(c => ({ aliases: c.aliases, name: c.name, id: c.uid }))) %>');

  var previous = "";
  var coolDownTimeout = null;
  const update = (area) => {
    updateCurrentCommand(area);
    if (coolDownTimeout) clearTimeout(coolDownTimeout);
    coolDownTimeout = setTimeout(() => {
      console.log(area.innerHTML, area.innerText);
      if (area.innerText === previous) return;
      var content = area.innerText;
      previous = content;
      if (content.startsWith(PREFIX)) content = content.slice(1, content.length);

      console.log(content);
      content = content.replace(/\s/g,' ') // remove all &nbsp
      const args = content.split(" ");
      console.log(args);
      if (!COMMANDS.map(c => c.aliases).flat(1).includes(args[0].toLowerCase())) return;

      const cmd = COMMANDS.find(c => c.aliases.includes(args[0]));

      const reset = () => {
        area.innerHTML = area.innerText;
        document.getElementById("error").innerHtml = "";
      }

      console.log("post")
      post("/api/cmd/eval", {
        args: args,
        id: cmd.id
      }).then(r => r.json()).then((res) => {
        console.log(res);

        if (res.success) {
          area.style.borderColor = "green";
          // TODO: display command data as registered on the server; (to show default values and the effect on them)
          return reset(); // no issues
        }
        area.style.borderColor = "red";
        const start = res.message.lastIndexOf("`", res.message.length - 4);
        const end = res.message.lastIndexOf("`");
        const syntax = res.message.slice(start + 1, end);
        console.log(syntax);

        const wordPos = syntax.split(" ").length - 1;
        console.log(wordPos);

        var words = area.innerText.replace(/\s/g, " ").split(" ");
        words = words.map((e, i) => {
          if (i === wordPos) return "<span class='error'>" + e + "</span>";
          return e;
        });
        area.innerHTML = words.join(" ");
        console.log(area.innerHTML)

        document.getElementById("error").innerText = res.message.replaceAll("  ", "\n");
      });
      console.log(args, cmd.name);
    }, 2000);
  }

  const commandContainer = document.getElementById("commands");
  var previousCmdId = null;
  const updateCurrentCommand = (area) => {
    var content = area.innerText;
    if (content.startsWith(PREFIX)) content = content.slice(1, content.length);

    const args = content.replace(/\s/g, " ").split(" ");
    if (!COMMANDS.map(c => c.aliases).flat(1).includes(args[0].toLowerCase())) return;
    const cmd = COMMANDS.find(c => c.aliases.includes(args[0]));
    console.log(cmd);

    const id = cmd.id;
    if (id !== previousCmdId) {
      if (previousCmdId) document.getElementById(previousCmdId).style.display = "none";
      document.getElementById(id).style.display = "inline";
      previousCmdId = id;
    }
  }

  window.post = (url, payload) => {
    return fetch(url, {
      method: "post",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
  }
  </script>

  <div id="commands">
    <% for (let i = 0; i < commands.length; i++) {%>
      <% const command = commands[i]//commands[17]; %>
      <%- include("commands/command", { command, colorMapping }) %>
    <% } %>

  </div>
</body>
