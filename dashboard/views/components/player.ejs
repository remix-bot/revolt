<div style="
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 0;
  row-gap: 1rem;
  grid-rows: 2;
  align-items: center;
  padding: 1.5rem;
  border-radius: 5px;
  background-color: rgb(31, 41, 55);
  /*border: 1px solid #282828;*/
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4);
  color: #fff;
  font-family: 'Helvetica Neue', sans-serif;
  font-size: 1rem;" class="remix-player">

  <div style="aspect-ratio: 1/1; margin-right: 2rem; grid-row: 1; grid-column: 1;" class="thumbnail">
    <img id="thumbnail" cbgrdc="nochange" style="border-radius: 5px; object-fit: cover; height: 100%; width: 100%;" src="/assets/icon.png" alt="Thumbnail of the current song." />
  </div>

  <div style="display: flex; justify-content: center; height: 100%; flex-grow: 2; grid-row: 1; grid-column-start: 2; grid-column-end: 4;" class="player-info">
    <h1 style="font-size: 1.5rem; font-weight: bold; margin-bottom: 0.5rem;">Currently Playing</h1>
    <p style="font-size: 1rem; margin-bottom: 1rem;"><span id="song"></span> - <span id="artist"></span></p>
    <span>
      <span id="elapsedTime">00:00</span>/<span id="duration">00:00</span>
    </span>
    <div style="display: flex; flex-direction: row; justify-content: center; opacity: 0.5">
      <button class="btn btn-play btn-pbt hidden" style="margin-right: 0.5rem;" onclick="togglePlay(this)" action="resume" disabled>
        <i class="fa-solid fa-play" style="color: #e9196c"></i>
      </button>
      <button class="btn btn-pause btn-pbt" onclick="togglePlay(this)" action="pause" disabled>
        <i class="fa-solid fa-pause" style="color: #e9196c; margin-right: 0.5rem;"></i>
      </button>
      <button class="btn btn-skip btn-pbt" onclick="pushAction(this)" action="skip" disabled>
        <i class="fa-solid fa-forward" style="color: #e9196c"></i>
      </button>
      <div class="slidecontainer" style="margin-left: 0.5rem; display: flex; flex-direction: row; align-items: center; gap: 0.2rem" title="100%">
        <input type="range" style="accent-color: #e9196c; background: #e9196c" class="slider" value="100" min="0" max="100" onmouseup="changeVolume(this.value)" oninput="updateSlider(this)" id="volumeSlider" />
        <i class="fa-solid fa-volume-high" style="float:left;color: #e9196c" id="volumeIcon"></i>
      </div>
    </div>
    <div style="position: relative; display: flex; flex-direction: column" class="search-container">
      <input type="text" name="search" placeholder="Search or paste a link" onkeyup="keyUpSearch(this)" autocomplete="off" id="search"
        style="margin: 10px 0 0;
          padding: 5px;
          padding-left: 7px;
          padding-right: 7px;
          align-self: center;
          border: none;
          border-radius: 5px;
          font-size: 16px;
          width: 100%;
          max-width: 400px;
          background-color: rgb(19, 25, 39);
          border-color: #bbb;
          transition: all 0.2s ease-in-out;">
      <div style="position: relative; align-self: center; width: 100%">
        <ul id="completions" style="
          background-color: rgb(19, 25, 39);
          box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4);
          border-radius: 5px;/*0 0 5px 5px;*/
          position: absolute;
          display: none;
          top: 0;
          left: 50%;
          transform: translateX(-50%);
          algin-self: center;
          width: 100%;
          max-width: 400px;
          padding: 5px">
        </ul>
      </div>
    </div>
    <a style="position: absolute; top:1rem; right: 1rem; text-decoration: none;" class="player-maximise" href="javascript:void(0);" onclick="maximisePlayer()"><i class="fa-solid fa-up-right-and-down-left-from-center"></i></a>
  </div>

  <!-- queue -->
  <div style="grid-row: 2; grid-column-start: 1; grid-column-end: 4" class="queue-container">
    <h1 style="font-size: 1.5rem">Queue</h1>
    <br />
    <div style="width: 100%; height: 4rem; padding: 0.3rem; display: flex; display: none; flex-direction: row; gap: 0.5rem; align-items: center; border-bottom: 1px solid rgb(19, 25, 39)" id="originItem"> <!-- for the simplicity of the script, this has been moved out of .queue -->
      <img alt="song cover" src="/assets/icon.png" style="aspect-ratio: 1 / 1; height: 100%; border-radius: 5px; object-fit: cover" cover />
      <div style="flex-grow: 3; display: flex; flex-direction: column; align-items: flex-start; gap: 0.1rem">
        <span style="font-size: 1.1rem" title>Song name</span>
        <span style="font-size: 0.8rem" artist>Artist name</span>
      </div>
      <p style="align-self: center" duration>3:08</p>
    </div>
    <div class="queue" style="width: 100%; display: flex; flex-direction: column;"></div> <!-- inspired by yt music -->
  </div>
  <style>
  .suggestion-li {
    cursor: pointer;
  }
  .slider {
    -webkit-appearance: none;
    appearance: none;
    width: 4.5rem;
    height: 0.7em;
    outline: none;
    background: rgb(19, 25, 39);
    border-radius: 7px;
  }
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    height: 0.9rem;
    width: 0.9rem;
    background: #e9196c;
    border-radius: 100%;
    cursor: pointer;
    position: relative;
    border: 0.5px solid rgb(19, 25, 39);
  }
  .slider::-moz-range-thumb {
    height: 0.9rem;
    width: 0.9rem;
    background: #e9196c;
    border-radius: 100%;
    cursor: pointer;
    position: relative;
    border: 0.5px solid rgb(19, 25, 39);
  }

  .player-maximise {
    display: none;
  }
  .minimised.player-maximise {
    display: block;
  }
  .minimised.remix-player {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 7rem;
  }
  .thumbnail {
    height: 12rem;
  }
  .thumbnail.minimised {
    height: 5.5rem;
  }
  .player-info {
    flex-direction: column;
  }
  .player-info.minimised {
    flex-direction: row;
    align-items: center;
    gap: 1rem;
  }
  .minimised > h1 {
    display: none;
  }
  .minimised > p {
    margin-bottom: 0 !important;
    margin-right: 0.5rem;
    flex-grow: 2;
    text-align: left;
  }
  .queue-container.minimised {
    display: none;
  }
  .queue:empty:after {
    content: "Empty";
    /*color: rgb(19, 25, 39);*/
    font-size: 70%;
  }
  /*.queue > * {
    transition: 1s all;
  }*/
  </style>

  <script> // TODO: implement queue actions
  const prettifyMS = (milliseconds) => {
    const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;

  	const parsed = {
  		days: roundTowardsZero(milliseconds / 86400000),
  		hours: roundTowardsZero(milliseconds / 3600000) % 24,
  		minutes: roundTowardsZero(milliseconds / 60000) % 60,
  		seconds: roundTowardsZero(milliseconds / 1000) % 60,
  		milliseconds: roundTowardsZero(milliseconds) % 1000,
  		microseconds: roundTowardsZero(milliseconds * 1000) % 1000,
  		nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000
  	};

    const units = {
      days: "d",
      hours: "h",
      minutes: "m",
      seconds: "s"
    }

    var result = "";
    for (let k in parsed) {
      if (!parsed[k] || !units[k]) continue;
      result += (((parsed[k] + "").length < 2) ? "0" : "") + parsed[k] + ":";
    }
    return result.slice((result.charAt(0) == "0") ? 1 : 0, result.length - 1).trim();
  }
  const mt = document.getElementById("originItem");
  const queue = document.getElementsByClassName("queue")[0];
  var queueData = [];
  const createSongItem = (video) => {
    const n = mt.cloneNode(true);
    n.id = "song#" + video.videoId;
    n.querySelector("span[title]").innerText = video.title;
    n.querySelector("span[artist]").innerText = (!video.artists) ? video.author.name : video.artists.map(a => `${a.name}`).join(" & ");
    n.querySelector("p[duration]").innerText = video.duration.timestamp || prettifyMS(video.duration);
    n.querySelector("img[cover]").src = video.thumbnail;
    n.style.display = "flex";
    return n;
  }
  const updateQueue = (data) => {
    console.log(data);
    switch (data.type) {
      case "add": // something is added to the queue
        const video = data.data.data;
        const n = createSongItem(video);
        video.element = n;
        if (data.data.append) {
          queueData.push(video);
          queue.appendChild(n);
        } else {
          queueData.unshift(video);
          queue.prepend(n);
        }
      break;
      case "remove": // something is removed from the queue
        const index = data.data.index;
        queue.children[index].remove();
        queueData.splice(index, 1);
      break;
      case "update": // queue has changed due to a new song playing
        const next = queue.children[0];
        next.remove();
        queueData.splice(0, 1);
        if (data.data.loop) {
          const item = createSongItem(data.data.old);
          queue.appendChild(item);
          data.data.old.element = item;
          queueData.push(data.data.old);
        }
      break;
      case "shuffle":
        const newArr = data.data;
        queueData.forEach((item) => {
          const idx = newArr.findIndex(e => e.videoId === item.videoId && !e.consumed);
          item.queueIndex = idx;
          newArr[idx].consumed = true;
        });
        queueData = queueData.sort((a, b) => b.queueIndex - a.queueIndex);
        queueData.forEach(v => {
          queue.prepend(v.element);
        });
      break;
    }
  }
  const renderQueue = (q) => {
    queue.innerHTML = "";
    q.forEach((item) => {
      const i = createSongItem(item);
      queue.appendChild(i);
      item.element = i;
      queueData.push(item);
    });
  }
  </script>

  <script>
  const togglePlay = async (btn) => {
    const success = await pushAction(btn);
    if (!success) return;
    btn.classList.add("hidden");
    const index = (btn.parentElement.children[0] == btn) ? 1 : 0;
    btn.parentElement.children[index].classList.remove("hidden");
  }
  const updatePlaybackStatus = (data) => {
    const container = document.getElementsByClassName("btn-play")[0].parentElement;
    // 0 + data.paused: converts the boolean value to an integer
    container.children[0 + data.paused].classList.add("hidden");
    container.children[1 - (0 + data.paused)].classList.remove("hidden");
  }
  </script>
  <script>
  const updateSlider = (e) => {
    e.style.background = `linear-gradient(to right, #e9196c ${e.value}%, rgb(19, 25, 39) ${e.value}%)`;
    const value = Math.round(e.value);
    volumeSlider.parentElement.title = value + "%";
    updateVolIcon(value);
  }
  const updateVolIcon = (value) => {
    if (value < 50) {
      if (volumeIcon.classList.contains("fa-volume-low")) return;
      volumeIcon.classList.remove("fa-volume-high");
      volumeIcon.classList.add("fa-volume-low");
    } else {
      if (volumeIcon.classList.contains("fa-volume-high")) return;
      volumeIcon.classList.add("fa-volume-high");
      volumeIcon.classList.remove("fa-volume-low");
    }
  }

  const volumeSlider = document.getElementById("volumeSlider");
  const volumeIcon = document.getElementById("volumeIcon");
  const setVolume = (val) => {
    volumeSlider.style.background = `linear-gradient(to right, #e9196c ${val}%, rgb(19, 25, 39) ${val}%)`;
    volumeSlider.value = val;
    updateVolIcon(val);
  }
  const changeVolume = (vol) => {
    post("/api/dashboard/control", { action: "volume", data: Math.round(vol) }).then(r => r.json()).then(data => {
      // TODO: maybe put something in here idk
    });
  }
  </script>
  <script>
  var runningRequest = false;
  const suggestions = document.getElementById("completions");
  const reset = (i) => {
    suggestions.style.display = "none";
    i.value = "";
    i.blur();
  }
  document.getElementById("search").addEventListener("keyup", (event) => {
    if (event.code == "Enter") {event.preventDefault(); queueSearch(event.target.value); reset(event.target)}
  });
  window.addEventListener("click", (event) => {
    if (!event.target.matches(".search-container > *")) return reset(event.target);
  });

  const validURL = (str) => {
    var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
      '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
      '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
      '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
      '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
      '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
    return !!pattern.test(str);
  }
  const queueSearch = async (query) => {
    if (validURL(query)) return play(query);
    if (!minimised) minimisePlayer();
    const player = document.getElementsByClassName("remix-player")[0];
    const text = await fetch("/search-content?q=" + encodeURIComponent(query)).then(r => r.text())
    //window.history.pushState(document.documentElement.innerHTML, "Search | Remix", "/search?q=" + encodeURIComponent(query))
    document.getElementById("external").innerHTML = text;
    document.getElementById("external").style.display = "block";
    document.querySelector("section[class='main']").style.display = "none";
    document.body.appendChild(player);
  }
  const play = (link) => {
    if (minimised) maximisePlayer();
    var video;
    if (link.parentElement) video = link.parentElement.parentElement.parentElement.getAttribute("video");
    const notification = addNotification("Playlist", "Adding to playlist. Watch the current progress in the revolt channel (WIP)", 5000);
    post("/api/dashboard/queue", { action: "add", query: video || link }).then(async r => {
      const d = await r.json()
      if (r.status !== 200 || (d.success === false)) {
        return addNotification("Playlist Error", d.message, 7000, "error");
      }
      notification.description = d.message;
    });
  }

  const keyUpSearch = async (i) => {
    if (i.value == "") reset(i);
    if (runningRequest) return;
    runningRequest = true;
    const data = await getSuggestions(i.value);
    suggestions.innerHTML = "";
    suggestions.style.display = "block";
    //if (data.length == 0) reset(i);
    data.forEach(suggestion => {
      const li = document.createElement("li");
      li.innerText = suggestion;
      li.setAttribute("suggestion", suggestion);
      li.classList.add("suggestion-li");
      li.onclick = () => { queueSearch(suggestion); reset(i) }
      suggestions.appendChild(li)
    });
    runningRequest = false;
  }
  const getSuggestions = (query) => {
    return new Promise(res => {
      const script = document.createElement("script");
      script.async = true;
      const cname = "suggestion" + (Math.random() + "").replaceAll(".", "");
      window[cname] = (data) => {
        res(data[1]);
        script.remove();
        delete window[cname];
      }
      script.src = "https://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q=" + encodeURIComponent(query) + "&callback=" + cname; // "hl" parameter for locale
      document.head.appendChild(script);
    });
  }
  </script>
  <script>
  var minimised = false;
  const minimisePlayer = () => {
    const addToClass = (c) => {
      const elems = document.getElementsByClassName(c);
      for (let i = 0; i < elems.length; i++) {
        elems[i].classList.add("minimised");
      }
    }
    addToClass("remix-player");
    addToClass("thumbnail");
    addToClass("player-info");
    addToClass("player-maximise");
    addToClass("queue-container");
    minimised = true;
  }
  maximisePlayer = () => {
    const removeFromClass = (c) => {
      const elems = document.getElementsByClassName(c);
      for (let i = 0; i < elems.length; i++) {
        elems[i].classList.remove("minimised");
      }
    }
    removeFromClass("remix-player");
    removeFromClass("thumbnail");
    removeFromClass("player-info");
    removeFromClass("player-maximise");
    removeFromClass("queue-container");

    document.getElementById("external").style.display = "none";
    document.querySelector("section[class='main']").style.display = "block";
    const player = document.getElementsByClassName("remix-player")[0];
    document.querySelector("div[class='main-container']").appendChild(player);

    minimised = false;
  }

  const bgrdImg = document.getElementById("thumbnail");
  const pBgrd = bgrdImg.parentElement.parentElement;

  const song = document.getElementById("song");
  const artist = document.getElementById("artist");

  const duration = document.getElementById("duration");
  const elapsedTime = document.getElementById("elapsedTime");

  window.post = (url, payload) => {
    return fetch(url, {
      method: "post",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
  }
  const pushAction = (btn) => {
    return new Promise(res => {
      return post('/api/dashboard/control', { action: btn.getAttribute("action") }).then(r => r.json()).then(d => res(d.success));
    })
  }

  bgrdImg.onload = (e) => {
    const img = e.target;
    if (img.getAttribute("cbgrdc") == "nochange") return img.setAttribute("cbgrdc", "change"); // don't change the background color
    const canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);

    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

    canvas.remove();

    const rgbArray = buildRgb(imageData.data);
    const quantColors = quantization(rgbArray, 0);

    let i = ~~(quantColors.length / 2);
    (document.body.style || pBgrd.style).backgroundColor = `rgba(${quantColors[i].r}, ${quantColors[i].g}, ${quantColors[i].b}, 1)`; // TODO: prevent very light colours
    //(document.body.style || pBgrd.style).background = createGradientRGB([quantColors[i], quantColors[i + 1]]);

    //pBgrd.style.color = (isLight(quantColors[i])) ? "black" : "white";
    //pBgrd.style.boxShadow = `-6px 0px 12px 5px rgba(${quantColors[i].r}, ${quantColors[i].g}, ${quantColors[i].b},0.6)`;

    /*const colors = buildPalette(quantColors); // gradient version (might look better with less colours in the gradient)
    console.log("gradient: ", createGradient(colors));
    /*pBgrd.style.background = createGradient(colors);
    pBgrd.style.color = (isLight(colors[~~(colors.length / 2)])) ? "black" : "white";*/
  }

  const isLight = (rgb) => {
    const brightness = ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;
    return brightness > 155;
  }
  const hexToRgbA = (hex, a) => {
    var c;
    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){
      c= hex.substring(1).split('');
      if(c.length== 3){
        c= [c[0], c[0], c[1], c[1], c[2], c[2]];
      }
      c= '0x'+c.join('');
      return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + a + ')';
    }
    throw new Error('Bad Hex');
  }
  const createGradientRGB = (colors) => {
    var gradient = "linear-gradient(30deg";
    colors.forEach((color, i) => {
      const a = (i/colors.length) * 3;
      gradient += `, rgb(${color.r}, ${color.g}, ${color.b}) ${i/colors.length * 100}%`;
    });
    return gradient += ")";
  }
  const createGradient = (colors) => {
    var gradient = "linear-gradient(30deg";
    colors.forEach((color, i) => {
      const a = (i/colors.length) * 3;
      gradient += `, ${hexToRgbA(color, (a > 1) ? 1 : a)} ${i/colors.length * 100}%`;
    });
    return gradient += ")";
  }
  const buildPalette = (colorsList) => {
    var orderedByColor = orderByLuminance(colorsList);
    const remove = Math.ceil(orderedByColor.length * 0.3);
    orderedByColor = orderedByColor.slice(0, orderedByColor.length - remove)

    const palette = [];

    for (let i = 0; i < orderedByColor.length; i++) {
      const hexColor = rgbToHex(orderedByColor[i]);

      /*if (i > 0) {
        const difference = calculateColorDifference(
          orderedByColor[i],
          orderedByColor[i - 1]
        );

        // if the distance is less than 120 we ommit that color
        if (difference < 120) {
          continue;
        }
      }*/
      palette.push(hexColor);
    }
    return palette;
  };

  //  Convert each pixel value ( number ) to hexadecimal ( string ) with base 16
  const rgbToHex = (pixel) => {
    const componentToHex = (c) => {
      const hex = c.toString(16);
      return hex.length == 1 ? "0" + hex : hex;
    };

    return (
      "#" +
      componentToHex(pixel.r) +
      componentToHex(pixel.g) +
      componentToHex(pixel.b)
    ).toUpperCase();
  };

  /**
   * Convert HSL to Hex
   * this entire formula can be found in stackoverflow, credits to @icl7126 !!!
   * https://stackoverflow.com/a/44134328/17150245
   */
  const hslToHex = (hslColor) => {
    const hslColorCopy = { ...hslColor };
    hslColorCopy.l /= 100;
    const a =
      (hslColorCopy.s * Math.min(hslColorCopy.l, 1 - hslColorCopy.l)) / 100;
    const f = (n) => {
      const k = (n + hslColorCopy.h / 30) % 12;
      const color = hslColorCopy.l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      return Math.round(255 * color)
        .toString(16)
        .padStart(2, "0");
    };
    return `#${f(0)}${f(8)}${f(4)}`.toUpperCase();
  };

  /**
   * Convert RGB values to HSL
   * This formula can be
   * found here https://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl/
   */
  const convertRGBtoHSL = (rgbValues) => {
    return rgbValues.map((pixel) => {
      let hue,
        saturation,
        luminance = 0;

      // first change range from 0-255 to 0 - 1
      let redOpposite = pixel.r / 255;
      let greenOpposite = pixel.g / 255;
      let blueOpposite = pixel.b / 255;

      const Cmax = Math.max(redOpposite, greenOpposite, blueOpposite);
      const Cmin = Math.min(redOpposite, greenOpposite, blueOpposite);

      const difference = Cmax - Cmin;

      luminance = (Cmax + Cmin) / 2.0;

      if (luminance <= 0.5) {
        saturation = difference / (Cmax + Cmin);
      } else if (luminance >= 0.5) {
        saturation = difference / (2.0 - Cmax - Cmin);
      }

      /**
       * If Red is max, then Hue = (G-B)/(max-min)
       * If Green is max, then Hue = 2.0 + (B-R)/(max-min)
       * If Blue is max, then Hue = 4.0 + (R-G)/(max-min)
       */
      const maxColorValue = Math.max(pixel.r, pixel.g, pixel.b);

      if (maxColorValue === pixel.r) {
        hue = (greenOpposite - blueOpposite) / difference;
      } else if (maxColorValue === pixel.g) {
        hue = 2.0 + (blueOpposite - redOpposite) / difference;
      } else {
        hue = 4.0 + (greenOpposite - blueOpposite) / difference;
      }

      hue = hue * 60; // find the sector of 60 degrees to which the color belongs

      // it should be always a positive angle
      if (hue < 0) {
        hue = hue + 360;
      }

      // When all three of R, G and B are equal, we get a neutral color: white, grey or black.
      if (difference === 0) {
        return false;
      }

      return {
        h: Math.round(hue) + 180, // plus 180 degrees because that is the complementary color
        s: parseFloat(saturation * 100).toFixed(2),
        l: parseFloat(luminance * 100).toFixed(2),
      };
    });
  };

  /**
   * Using relative luminance we order the brightness of the colors
   * the fixed values and further explanation about this topic
   * can be found here -> https://en.wikipedia.org/wiki/Luma_(video)
   */
  const orderByLuminance = (rgbValues) => {
    const calculateLuminance = (p) => {
      return 0.2126 * p.r + 0.7152 * p.g + 0.0722 * p.b;
    };

    return rgbValues.sort((p1, p2) => {
      return calculateLuminance(p2) - calculateLuminance(p1);
    });
  };

  const buildRgb = (imageData) => {
    const rgbValues = [];
    // note that we are loopin every 4!
    // for every Red, Green, Blue and Alpha
    for (let i = 0; i < imageData.length; i += 4) {
      const rgb = {
        r: imageData[i],
        g: imageData[i + 1],
        b: imageData[i + 2],
      };

      rgbValues.push(rgb);
    }

    return rgbValues;
  };

  /**
   * Calculate the color distance or difference between 2 colors
   *
   * further explanation of this topic
   * can be found here -> https://en.wikipedia.org/wiki/Euclidean_distance
   * note: this method is not accuarate for better results use Delta-E distance metric.
   */
  const calculateColorDifference = (color1, color2) => {
    const rDifference = Math.pow(color2.r - color1.r, 2);
    const gDifference = Math.pow(color2.g - color1.g, 2);
    const bDifference = Math.pow(color2.b - color1.b, 2);

    return rDifference + gDifference + bDifference;
  };

  // returns what color channel has the biggest difference
  const findBiggestColorRange = (rgbValues) => {
    /**
     * Min is initialized to the maximum value posible
     * from there we procced to find the minimum value for that color channel
     *
     * Max is initialized to the minimum value posible
     * from there we procced to fin the maximum value for that color channel
     */
    let rMin = Number.MAX_VALUE;
    let gMin = Number.MAX_VALUE;
    let bMin = Number.MAX_VALUE;

    let rMax = Number.MIN_VALUE;
    let gMax = Number.MIN_VALUE;
    let bMax = Number.MIN_VALUE;

    rgbValues.forEach((pixel) => {
      rMin = Math.min(rMin, pixel.r);
      gMin = Math.min(gMin, pixel.g);
      bMin = Math.min(bMin, pixel.b);

      rMax = Math.max(rMax, pixel.r);
      gMax = Math.max(gMax, pixel.g);
      bMax = Math.max(bMax, pixel.b);
    });

    const rRange = rMax - rMin;
    const gRange = gMax - gMin;
    const bRange = bMax - bMin;

    // determine which color has the biggest difference
    const biggestRange = Math.max(rRange, gRange, bRange);
    if (biggestRange === rRange) {
      return "r";
    } else if (biggestRange === gRange) {
      return "g";
    } else {
      return "b";
    }
  };

  /**
   * Median cut implementation
   * can be found here -> https://en.wikipedia.org/wiki/Median_cut
   */
  const quantization = (rgbValues, depth) => {
    const MAX_DEPTH = 4;

    // Base case
    if (depth === MAX_DEPTH || rgbValues.length === 0) {
      const color = rgbValues.reduce(
        (prev, curr) => {
          prev.r += curr.r;
          prev.g += curr.g;
          prev.b += curr.b;

          return prev;
        },
        {
          r: 0,
          g: 0,
          b: 0,
        }
      );

      color.r = Math.round(color.r / rgbValues.length);
      color.g = Math.round(color.g / rgbValues.length);
      color.b = Math.round(color.b / rgbValues.length);

      return [color];
    }

    /**
     *  Recursively do the following:
     *  1. Find the pixel channel (red,green or blue) with biggest difference/range
     *  2. Order by this channel
     *  3. Divide in half the rgb colors list
     *  4. Repeat process again, until desired depth or base case
     */
    const componentToSortBy = findBiggestColorRange(rgbValues);
    rgbValues.sort((p1, p2) => {
      return p1[componentToSortBy] - p2[componentToSortBy];
    });

    const mid = rgbValues.length / 2;
    return [
      ...quantization(rgbValues.slice(0, mid), depth + 1),
      ...quantization(rgbValues.slice(mid + 1), depth + 1),
    ];
  };

  const formatTime = (milliseconds) => {
    return new Date(milliseconds).toISOString().slice(
      // if 1 hour passed, show the hour component,
      // if 1 hour hasn't passed, don't show the hour component
      milliseconds > 3600000 ? 11 : 14,
      19
    );
  }

  Number.isInteger = Number.isInteger || function(value) {
    return typeof value === 'number' &&
      isFinite(value) &&
      Math.floor(value) === value;
  };

  var timeElapsed = 0;
  var timeInterval = null;

  const startTime = async (startValue) => {
    timeElapsed = startValue;
    elapsedTime.innerText = formatTime(startValue);

    const countUp = () => {
      timeElapsed += 1000;
      elapsedTime.innerText = formatTime(timeElapsed);
    }

    if (!Number.isInteger(timeElapsed / 1000)) {
      const diff = ((Math.floor(timeElapsed / 1000) + 1) - (timeElapsed / 1000)) * 1000;
      timeElapsed = timeElapsed + diff;
      await (new Promise(res => setTimeout(res, diff)));
      countUp();
    }
    timeInterval = setInterval(countUp, 1000);
  }
  const pauseTime = (time) => {
    if (timeInterval) clearInterval(timeInterval);
    timeElapsed = time;
    elapsedTime.innerText = formatTime(timeElapsed);
  }
  const resetTime = () => {
    elapsedTime.innerText = "00:00";
    duration.innerText = "00:00"
  }

  function update(vid) {
    bgrdImg.src = "/api/imageProxy?url=" + encodeURIComponent(vid.thumbnail);
    artist.innerText = (!vid.artists) ? vid.author.name : vid.artists.map(a => `${a.name}`).join(" & ");
    song.innerText = vid.title;

    duration.innerText = (typeof vid.duration !== "object") ? vid.duration : vid.duration.timestamp;
  }
  function resetPlayer() {
    bgrdImg.src = "/assets/icon.png";
    bgrdImg.setAttribute("cbgrdc", "nochange");
    document.body.style.backgroundColor = "rgb(19, 25, 39)";
    artist.innerText = "";
    song.innerText = "";
    queue.innerHTML = "";

    const btns = document.getElementsByClassName("btn-pbt");
    btns[0].parentElement.style.opacity = 0.5;
    for (let i = 0; i < btns.length; i++) {
      btns[i].disabled = true;
    }
  }
  function enablePlayer() {
    const btns = document.getElementsByClassName("btn-pbt");
    btns[0].parentElement.style.opacity = 1;
    for (let i = 0; i < btns.length; i++) {
      btns[i].disabled = false;
    }
  }
  </script>
</div>
